#!/usr/bin/env bash

set -euo pipefail

KUBE_DIR=$HOME/.kube/version-manager
KUBEBIN=$KUBE_DIR/bin
KUBEMAN_BIN=$KUBE_DIR/bin/kubeman
CURRENT_KUBECTL="$KUBE_DIR/current"

usage(){
    cat <<"EOF"
A kubectl plugin for automate synchronize version between kubectl and kubernetes server version

Usage:
    version-manager [command]

Available Commands:
    activate        Activate kubectl auto switch version
    list            List of kubectl binaries version
    list-remotes    List of kubernetes server version in $KUBECONFIG

Flags:
    -h, --help      Show this message
EOF
}

download_kubectl(){
    local OS _k8s_version

    if [[ -z $1 ]]; then
        echo "error: no kubectl version provided"
        exit 1
    fi

    _k8s_version=$1
    OS=`uname -s | awk '{print tolower($0)}'`
    _curl="curl -sLo $KUBEBIN/kubectl-${_k8s_version} https://storage.googleapis.com/kubernetes-release/release/${_k8s_version}/bin/${OS}/amd64/kubectl"
    eval $_curl
    chmod +x $KUBEBIN/kubectl-$_k8s_version

}

switch_kubectl(){
    local _k8s_version _kubectl
    _kubectl=`which kubectl`

    if [[ `basename $_kubectl` != "kubectl" ]]; then
        echo "error: No kubectl binary was found"
        exit 1
    elif [[ -z $(find $KUBEMAN_BIN -type l 2>/dev/null) ]]; then
        _k8s_version=$(eval "$_kubectl version --client --short | grep "Client" | awk '{print \$3}'")
        echo "kubectl-$_k8s_version" > $CURRENT_KUBECTL

        ln -sf $HOME/.krew/bin/kubectl-version_manager $KUBEMAN_BIN

    else
        _k8s_version=$(eval "$_kubectl version --short | grep "Server" | awk '{print \$3}'")
        _k8s_version=${_k8s_version%%-*}

        # check existence of kubectl version
        exist=`find $KUBEBIN -name kubectl-$_k8s_version -type f`
        if [[ -z "$exist" ]]; then
            # kubectl version not exist, download kubectl version
            download_kubectl $_k8s_version
        fi
        echo "kubectl-$_k8s_version" > $CURRENT_KUBECTL
    fi

}

activate(){
    # https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux

    RED='\033[0;31m'
    NC='\033[0m'

    if [[ -n `find $KUBEBIN -type l 2>/dev/null` ]];then
        echo ":: Kubeman is already activated ::"
        exit 0
    else
        mkdir -p $KUBE_DIR
        mkdir -p $KUBEBIN
        switch_kubectl

        printf ":: Kubeman is activated ::\n\n"
        printf "${RED}WARNING${NC}: To be able to run kubeman utility, you need to add\n"
        printf "the following to your"
        if [[ $SHELL == /usr/bin/zsh ]];then
            printf "$HOME/.zshrc:\n\n"
        elif [[ $SHELL == /usr/bin/bash ]];then
            printf "$HOME/.bashrc:\n\n"
        fi
        printf "Add the kubeman CLI to your path with:\n\n"
        printf "    export PATH=\"\$PATH:\$HOME/.kube/version-manager/bin\"\n\n"
        printf "and restart your shell.\n\n"
    fi
}

main(){
    if [[ "`basename $0`" == "kubectl" || "`basename $0`" == "kubeman" ]];then
        _arr=( "$@" )
        _args=( "${_arr[@]:1}" )

        if [[ "$#" -gt 0 && "$1" == "ns" ]];then
            kubens "${_args[@]}"
        elif [[ "$#" -gt 0 && "$1" == "ctx" ]];then
            kubectx "${_args[@]}"
        else
            switch_kubectl
            $KUBEBIN/`cat $CURRENT_KUBECTL` "$@"
        fi
    elif [[ "`basename $0`" == "kubectl-version_manager" ]];then
        if [[ "$#" -eq 0 ]];then
            usage
        elif [[ "$#" -gt 0 ]];then
            if [[ "$@" =~ "-h" || "$@" =~ "--help" ]];then
                usage
            elif [[ "$1" == "activate" ]];then
                activate
            elif [[ "$1" == "list" ]];then
                echo "List kubectl binaries"
                echo "Coming soon"
            elif [[ "$1" == "list-remotes" ]];then
                echo "List kubernetes server version"
                echo "Coming soon"
            else
                echo "error: unidentified flags"
                usage
                exit 1
            fi
        fi
    fi
}

main "$@"
